!(function ($) {
  const BootstrapPaginator = function (element, options) {
    this.init(element, options);
  };
  let old = null;
  (BootstrapPaginator.prototype = {
    init(element, options) {
      this.$element = $(element);
      const version =
        options && options.bootstrapMajorVersion
          ? options.bootstrapMajorVersion
          : $.fn.bootstrapPaginator.defaults.bootstrapMajorVersion;
      const id = this.$element.attr('id');
      if (version === 2 && !this.$element.is('div'))
        throw 'in Bootstrap version 2 the pagination must be a div element. Or if you are using Bootstrap pagination 3. Please specify it in bootstrapMajorVersion in the option';
      if (version > 2 && !this.$element.is('ul'))
        throw 'in Bootstrap version 3 the pagination root item must be an ul element.';
      (this.currentPage = 1),
        (this.lastPage = 1),
        this.setOptions(options),
        (this.initialized = !0);
    },
    setOptions(options) {
      (this.options = $.extend(
        {},
        this.options || $.fn.bootstrapPaginator.defaults,
        options
      )),
        (this.totalPages = parseInt(this.options.totalPages, 10)),
        (this.numberOfPages = parseInt(this.options.numberOfPages, 10)),
        options &&
          typeof options.currentPage !== 'undefined' &&
          this.setCurrentPage(options.currentPage),
        this.listen(),
        this.render(),
        this.initialized ||
          this.lastPage === this.currentPage ||
          this.$element.trigger('page-changed', [
            this.lastPage,
            this.currentPage,
          ]);
    },
    listen() {
      this.$element.off('page-clicked'),
        this.$element.off('page-changed'),
        typeof this.options.onPageClicked === 'function' &&
          this.$element.bind('page-clicked', this.options.onPageClicked),
        typeof this.options.onPageChanged === 'function' &&
          this.$element.on('page-changed', this.options.onPageChanged),
        this.$element.bind('page-clicked', this.onPageClicked);
    },
    destroy() {
      this.$element.off('page-clicked'),
        this.$element.off('page-changed'),
        this.$element.removeData('bootstrapPaginator'),
        this.$element.empty();
    },
    show(page) {
      this.setCurrentPage(page),
        this.render(),
        this.lastPage !== this.currentPage &&
          this.$element.trigger('page-changed', [
            this.lastPage,
            this.currentPage,
          ]);
    },
    showNext() {
      const pages = this.getPages();
      pages.next && this.show(pages.next);
    },
    showPrevious() {
      const pages = this.getPages();
      pages.prev && this.show(pages.prev);
    },
    showFirst() {
      const pages = this.getPages();
      pages.first && this.show(pages.first);
    },
    showLast() {
      const pages = this.getPages();
      pages.last && this.show(pages.last);
    },
    onPageItemClicked(event) {
      const { type } = event.data;
      const { page } = event.data;
      this.$element.trigger('page-clicked', [event, type, page]);
    },
    onPageClicked(event, originalEvent, type, page) {
      const currentTarget = $(event.currentTarget);
      switch (type) {
        case 'first':
          currentTarget.bootstrapPaginator('showFirst');
          break;
        case 'prev':
          currentTarget.bootstrapPaginator('showPrevious');
          break;
        case 'next':
          currentTarget.bootstrapPaginator('showNext');
          break;
        case 'last':
          currentTarget.bootstrapPaginator('showLast');
          break;
        case 'page':
          currentTarget.bootstrapPaginator('show', page);
      }
    },
    render() {
      const containerClass = this.getValueFromOption(
        this.options.containerClass,
        this.$element
      );
      const size = this.options.size || 'normal';
      const alignment = this.options.alignment || 'left';
      const pages = this.getPages();
      const listContainer =
        this.options.bootstrapMajorVersion === 2
          ? $('<ul></ul>')
          : this.$element;
      const listContainerClass =
        this.options.bootstrapMajorVersion === 2
          ? this.getValueFromOption(
              this.options.listContainerClass,
              listContainer
            )
          : null;
      let first = null;
      let prev = null;
      let next = null;
      let last = null;
      let p = null;
      let i = 0;
      switch (
        (this.$element.prop('class', ''),
        this.$element.addClass('pagination'),
        size.toLowerCase())
      ) {
        case 'large':
        case 'small':
        case 'mini':
          this.$element.addClass(
            $.fn.bootstrapPaginator.sizeArray[
              this.options.bootstrapMajorVersion
            ][size.toLowerCase()]
          );
      }
      if (this.options.bootstrapMajorVersion === 2)
        switch (alignment.toLowerCase()) {
          case 'center':
            this.$element.addClass('pagination-centered');
            break;
          case 'right':
            this.$element.addClass('pagination-right');
        }
      for (
        this.$element.addClass(containerClass),
          this.$element.empty(),
          this.options.bootstrapMajorVersion === 2 &&
            (this.$element.append(listContainer),
            listContainer.addClass(listContainerClass)),
          this.pageRef = [],
          pages.first &&
            ((first = this.buildPageItem('first', pages.first)),
            first && listContainer.append(first)),
          pages.prev &&
            ((prev = this.buildPageItem('prev', pages.prev)),
            prev && listContainer.append(prev)),
          i = 0;
        i < pages.length;
        i += 1
      )
        (p = this.buildPageItem('page', pages[i])),
          p && listContainer.append(p);
      pages.next &&
        ((next = this.buildPageItem('next', pages.next)),
        next && listContainer.append(next)),
        pages.last &&
          ((last = this.buildPageItem('last', pages.last)),
          last && listContainer.append(last));
    },
    buildPageItem(type, page) {
      const itemContainer = $('<li></li>');
      const itemContent = $('<a></a>');
      let text = '';
      let title = '';
      const itemContainerClass = this.options.itemContainerClass(
        type,
        page,
        this.currentPage
      );
      const itemContentClass = this.getValueFromOption(
        this.options.itemContentClass,
        type,
        page,
        this.currentPage
      );
      let tooltipOpts = null;
      switch (type) {
        case 'first':
          if (
            !this.getValueFromOption(
              this.options.shouldShowPage,
              type,
              page,
              this.currentPage
            )
          )
            return;
          (text = this.options.itemTexts(type, page, this.currentPage)),
            (title = this.options.tooltipTitles(type, page, this.currentPage));
          break;
        case 'last':
          if (
            !this.getValueFromOption(
              this.options.shouldShowPage,
              type,
              page,
              this.currentPage
            )
          )
            return;
          (text = this.options.itemTexts(type, page, this.currentPage)),
            (title = this.options.tooltipTitles(type, page, this.currentPage));
          break;
        case 'prev':
          if (
            !this.getValueFromOption(
              this.options.shouldShowPage,
              type,
              page,
              this.currentPage
            )
          )
            return;
          (text = this.options.itemTexts(type, page, this.currentPage)),
            (title = this.options.tooltipTitles(type, page, this.currentPage));
          break;
        case 'next':
          if (
            !this.getValueFromOption(
              this.options.shouldShowPage,
              type,
              page,
              this.currentPage
            )
          )
            return;
          (text = this.options.itemTexts(type, page, this.currentPage)),
            (title = this.options.tooltipTitles(type, page, this.currentPage));
          break;
        case 'page':
          if (
            !this.getValueFromOption(
              this.options.shouldShowPage,
              type,
              page,
              this.currentPage
            )
          )
            return;
          (text = this.options.itemTexts(type, page, this.currentPage)),
            (title = this.options.tooltipTitles(type, page, this.currentPage));
      }
      return (
        itemContainer.addClass(itemContainerClass).append(itemContent),
        itemContent
          .addClass(itemContentClass)
          .html(text)
          .on(
            'click',
            null,
            { type, page },
            $.proxy(this.onPageItemClicked, this)
          ),
        this.options.pageUrl &&
          itemContent.attr(
            'href',
            this.getValueFromOption(
              this.options.pageUrl,
              type,
              page,
              this.currentPage
            )
          ),
        this.options.useBootstrapTooltip
          ? ((tooltipOpts = $.extend({}, this.options.bootstrapTooltipOptions, {
              title,
            })),
            itemContent.tooltip(tooltipOpts))
          : itemContent.attr('title', title),
        itemContainer
      );
    },
    setCurrentPage(page) {
      if (page > this.totalPages || page < 1) throw 'Page out of range';
      (this.lastPage = this.currentPage),
        (this.currentPage = parseInt(page, 10));
    },
    getPages() {
      const { totalPages } = this;
      let pageStart =
        this.currentPage % this.numberOfPages === 0
          ? (parseInt(this.currentPage / this.numberOfPages, 10) - 1) *
              this.numberOfPages +
            1
          : parseInt(this.currentPage / this.numberOfPages, 10) *
              this.numberOfPages +
            1;
      const output = [];
      let i = 0;
      let counter = 0;
      for (
        pageStart = pageStart < 1 ? 1 : pageStart, i = pageStart, counter = 0;
        counter < this.numberOfPages && totalPages >= i;
        i += 1, counter += 1
      )
        output.push(i);
      return (
        (output.first = 1),
        (output.prev = this.currentPage > 1 ? this.currentPage - 1 : 1),
        (output.next =
          this.currentPage < totalPages ? this.currentPage + 1 : totalPages),
        (output.last = totalPages),
        (output.current = this.currentPage),
        (output.total = totalPages),
        (output.numberOfPages = this.options.numberOfPages),
        output
      );
    },
    getValueFromOption(value) {
      let output = null;
      const args = Array.prototype.slice.call(arguments, 1);
      return (output =
        typeof value === 'function' ? value.apply(this, args) : value);
    },
  }),
    (old = $.fn.bootstrapPaginator),
    ($.fn.bootstrapPaginator = function (option) {
      const args = arguments;
      let result = null;
      return (
        $(this).each(function (index, item) {
          let $this = $(item);
          let data = $this.data('bootstrapPaginator');
          const options = typeof option !== 'object' ? null : option;
          if (!data)
            return (
              (data = new BootstrapPaginator(this, options)),
              ($this = $(data.$element)),
              $this.data('bootstrapPaginator', data),
              void 0
            );
          if (typeof option === 'string') {
            if (!data[option]) throw `Method ${option} does not exist`;
            result = data[option].apply(
              data,
              Array.prototype.slice.call(args, 1)
            );
          } else result = data.setOptions(option);
        }),
        result
      );
    }),
    ($.fn.bootstrapPaginator.sizeArray = {
      2: {
        large: 'pagination-large',
        small: 'pagination-small',
        mini: 'pagination-mini',
      },
      3: { large: 'pagination-lg', small: 'pagination-sm', mini: '' },
    }),
    ($.fn.bootstrapPaginator.defaults = {
      containerClass: '',
      size: 'normal',
      alignment: 'left',
      bootstrapMajorVersion: 2,
      listContainerClass: '',
      itemContainerClass(type, page, current) {
        return page === current ? 'active' : '';
      },
      itemContentClass(type, page, current) {
        return '';
      },
      currentPage: 1,
      numberOfPages: 5,
      totalPages: 1,
      pageUrl(type, page, current) {
        return null;
      },
      onPageClicked: null,
      onPageChanged: null,
      useBootstrapTooltip: !1,
      shouldShowPage(type, page, current) {
        let result = !0;
        switch (type) {
          case 'first':
            result = current !== 1;
            break;
          case 'prev':
            result = current !== 1;
            break;
          case 'next':
            result = current !== this.totalPages;
            break;
          case 'last':
            result = current !== this.totalPages;
            break;
          case 'page':
            result = !0;
        }
        return result;
      },
      itemTexts(type, page, current) {
        switch (type) {
          case 'first':
            return '&lt;&lt;';
          case 'prev':
            return '&lt;';
          case 'next':
            return '&gt;';
          case 'last':
            return '&gt;&gt;';
          case 'page':
            return page;
        }
      },
      tooltipTitles(type, page, current) {
        switch (type) {
          case 'first':
            return 'Go to first page';
          case 'prev':
            return 'Go to previous page';
          case 'next':
            return 'Go to next page';
          case 'last':
            return 'Go to last page';
          case 'page':
            return page === current
              ? `Current page is ${page}`
              : `Go to page ${page}`;
        }
      },
      bootstrapTooltipOptions: {
        animation: !0,
        html: !0,
        placement: 'top',
        selector: !1,
        title: '',
        container: !1,
      },
    }),
    ($.fn.bootstrapPaginator.Constructor = BootstrapPaginator);
})(window.jQuery);
